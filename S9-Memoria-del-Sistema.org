#+options: H:2
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: default
#+beamer_color_theme:
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header:


#+title: S9-Memoria-del-Sistema
#+date: 
#+author: 
Kenneth Gaona, Alejandro Guanocunga, David Jácome, Andrés Mendieta,
Miguel Molina, Jhon Solorzano, Edison Soto.
#+email: 
kenneth.gaona@epn.edu.ec, alejandro.guanocunga@epn.edu.ec, johan.jacome01@epn.edu.ec,
andres.mendieta@epn.edu.ec, miguel.molina@epn.edu.ec, jhon.solorzano01@epn.edu.ec,
edison.soto@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.3)
#+cite_export: biblatex

#+bibliography: bibliography.bib
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[spanish]{babel}
#+LATEX_HEADER: \usepackage[backend=biber,citestyle=apa, style=apa]{biblatex}


* Indicaciones
** Indicaciones
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:
- Recuerde que si options: H:2, entonces: 
  - ~*~ Declara el nombre de la Sección
  - ~**~ Declara el nombre de la diapositiva ANDRES MENDIETA
- Puede alterar la estructura de la diapositiva si lo considera
  necesario
- Para este tema consulte las siguientes fuentes:
  - \textcite{stallings2006}, 7ma edición, 2006, Español, Capítulo 5
    página 171 y Capítulo 6 página 197 [cite:@stallings2006].
  - \textcite{stallings2022computer}, 11ava edición, 2022, English,
    Capítulo 4 desde página 136, Capítulo 5 desde página 162 y Capitulo
    6 desde 201 [cite:@stallings2022computer].
- La tupla (E1,7, 97) significa Grupo E1, Libro Edición 7, página 97
  del PDF (no del libro)
- Las personas que exponen suben la presentación en formato .ORG y
  .PDF
- Las personas que atienden suben los apuntes de la clase de acuerdo al
  formato de toma de notas en .ORG y .PDF
** Diseño de las Diapositivas
- Para diseñar sus diapositivas puede consultar cualquiera de las
  presentaciones .ORG desarrolladas por el profesor así como al
  archivo [[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-B/Tutoriales/Beamer-Emacs/tutorialBeamer.org][tutorialBeamer.org]] en el repositorio de [[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-B/Tutoriales/Beamer-Emacs/tutorialBeamer.org][GitHub]] de la clase.
- Recuerde que los archivos .ORG son archivos de texto así que los
  puede copiar y sustituir por su texto propio.
** Sobre este Documento
- Este documento tiene la propuesta de temas a tratar y desarrollar
  por los estudiantes.
- Se ha de utilizar como base la bibliografía recomendada, pero puede
  consultar bibliografía adicional.
* Estructura del sistema de Memoria(E1, 11, 136)
** Principio de Localidad (E1, 11, 137)

- *Definición*: Fenómeno en el que los programas tienden a acceder repetidamente a un conjunto pequeño de instrucciones o datos durante intervalos cortos.
- *Importancia*: Base del diseño de jerarquías de memoria (RAM, caché, disco), ya que permite optimizar el rendimiento del sistema.

*** Tipos de localidad

- *Temporal*: Si se accede a un dato o instrucción, es probable que se acceda de nuevo pronto.
- *Espacial*: Si se accede a una dirección de memoria, es probable que se acceda a direcciones cercanas.

#+CAPTION: Analogía del escritorio de Bob.
#+NAME: fig:localidadBob
#+attr_latex: :width 0.60\textwidth
[[./imagenes/carpeta.jpg]]

*** Ejemplos

- *Bucles* → repiten instrucciones = localidad temporal.
- *Arreglos* → datos contiguos = localidad espacial.

#+CAPTION: Localidad de acceso en documentos web.
#+NAME: fig:webAccess
#+attr_latex: :width 0.70\textwidth
[[./imagenes/documentosweb.png]]

*** Aplicación práctica

- Se aprovecha en memorias caché mediante:
  - *Bloques grandes* (localidad espacial).
  - *Datos recientes* (localidad temporal).
  - *Prefetching* (traer datos antes de que se pidan).

** Características de los sistemas de Memoria (E1, 11, 142)

- Las memorias de computadora se clasifican según varias propiedades clave:
  - *Ubicación*
  - *Capacidad*
  - *Unidad de transferencia*
  - *Método de acceso*
  - *Desempeño (tiempos y velocidad)*

*** Ubicación

- *Memoria interna*: Está dentro del sistema. Ejemplos:
  - Registros, caché, memoria principal (RAM).
- *Memoria externa*: Dispositivos periféricos de almacenamiento.
  - Ejemplos: discos duros, SSDs, cintas.

*** Capacidad

- Se mide en *bytes* o *palabras*.
- Las memorias internas tienen capacidad más baja pero son más rápidas.
- Las externas almacenan mucho más, pero son más lentas.

*** Unidad de transferencia

- Es el tamaño de los datos que se leen o escriben de una vez.
  - Puede ser una palabra, un bloque o varios bytes.
- En RAM puede ser 32, 64 o 128 bits.
- En discos se usan *bloques* (por ejemplo, 4 KB o más).

#+CAPTION: Tipos comunes de unidades de transferencia.
#+NAME: fig:unidadesTransferencia
#+attr_latex: :width 0.60\textwidth
[[./imagenes/unidad de transferencia.png]]

*** Métodos de acceso

- *Secuencial*:
  - Se accede a los datos en orden.
  - Ejemplo: cintas magnéticas.
- *Directo*:
  - Se va a una zona general y luego se busca el dato.
  - Ejemplo: discos duros.
- *Aleatorio*:
  - Cualquier dirección se accede directamente y con el mismo tiempo.
  - Ejemplo: RAM.
- *Asociativo*:
  - Se busca por contenido, no por dirección.
  - Usado en algunas memorias caché.

*** Tiempos de acceso y desempeño

- *Tiempo de acceso*:
  - Tiempo desde que se pide un dato hasta que se obtiene.
  - En RAM suele ser constante.

- *Tiempo de ciclo de memoria*:
  - Tiempo entre dos operaciones consecutivas (lectura o escritura).
  - Incluye el tiempo de acceso + recuperación/regeneración del dato.

#+CAPTION: Relación entre acceso y ciclo de memoria.
#+NAME: fig:tiemposMemoria
#+attr_latex: :width 0.65\textwidth
[[./imagenes/acceso.png]]


** Jerarquía de Memoria (E1, 11,145) hasta (E1,11,150)

- *Objetivo*: Equilibrar tres factores clave:

  1. ¿Cuánta memoria se necesita? (Capacidad)
  2. ¿Qué tan rápido debe ser el acceso? (Velocidad)
  3. ¿Cuánto puede costar? (Costo)

- *Dilema del diseñador*: 

  - Memorias rápidas son caras.
  - Memorias grandes son lentas.
  - ¿Solución? Usar una *jerarquía de memoria*.

#+CAPTION: Relación entre costo, velocidad y tamaño en los niveles de memoria.
#+NAME: fig:JerarquiaMemoria
#+attr_latex: :width 0.90\textwidth
[[./imagenes/jerarquiamemoria.jpg]]

*** Características de la jerarquía

- A medida que bajamos de nivel:
  - ↓ Costo por bit
  - ↑ Capacidad
  - ↑ Tiempo de acceso
  - ↓ Frecuencia de acceso

Memoria más rápida, pequeña y costosa está cerca del procesador.  
Memoria más lenta, grande y barata está lejos del procesador.

*** Relaciones entre niveles (i e i+1)

- Si denotamos:
  - *Ci*: Costo por byte en nivel *i*
  - *Ti*: Tiempo de acceso promedio
  - *Ri*: Tasa de transferencia
  - *Si*: Tamaño total

- Entonces se cumple:

  - Ci > Ci+1
  - Ti < Ti+1
  - Ri > Ri+1
  - Si < Si+1

*** Memorias típicas en la jerarquía

#+CAPTION: Elementos típicos en la jerarquía de memoria.
#+NAME: tab:MemoriasJerarquia
| Nivel             | Tecnología             | Unidad de transferencia     | Gestionado por       |
|------------------+------------------------+-----------------------------+----------------------|
| Registros         | CMOS                   | Palabra (32 bits)           | Compilador           |
| Caché (L1–L4)     | SRAM / eDRAM           | Bloques de caché (32 bytes) | Hardware del CPU     |
| Memoria principal | DRAM                   | Página (1 kB)               | Sistema operativo    |
| Secundaria        | Disco magnético        | Sector (512 bytes)          | OS / Usuario         |
| Almacenamiento    | Cinta magnética, SSD   | Bloques grandes             | OS / Usuario         |

*** Principio de localidad

- *Localidad temporal*: Se accede varias veces a los mismos datos en poco tiempo.
- *Localidad espacial*: Se accede a datos cercanos entre sí (en memoria).

#+CAPTION: Aprovechamiento de la localidad en la jerarquía.
#+NAME: fig:LocalidadJerarquia
#+attr_latex: :width 0.80\textwidth
[[./imagenes/grafico.jpg]] 

- Esto permite que la mayoría de accesos se realicen en los niveles superiores.

*** Ejemplo práctico

- Supongamos:
  - Nivel 1: acceso de 0.01 ms
  - Nivel 2: acceso de 0.1 ms
  - Nivel 1 contiene el 95% de los datos (hit ratio H = 0.95)

- *Tiempo promedio de acceso*:

  \( T_{prom} = (0.95 \times 0.01) + (0.05 \times (0.01 + 0.1)) = 0.015 \text{ ms} \)

#+CAPTION: Tiempo promedio de acceso en función del hit ratio.
#+NAME: fig:CurvaAcceso
#+attr_latex: :width 0.75\textwidth
[[./imagenes/diagrama.jpg]] 

- Resultado: El tiempo promedio se acerca mucho al del nivel más rápido (L1).

*** Conclusión

- La jerarquía de memoria es fundamental para lograr buen rendimiento a bajo costo.
- Se apoya en la *localidad* para minimizar el uso de memorias lentas.
- La combinación de tecnologías permite sistemas eficientes y escalables.

* Memoria Cache (E2, 11, 162)
** Principios Básicos de las Memorias Caché (E2,11,163)(E2,7,133)
- Qué es?
  - Es una pequeña y rápida memoria construida con semiconductores (Chips).
  - Contiene copias de datos e instrucciones frecuentes de la RAM.
  - Ubicada cerca del CPU.
  - No necesita muchos refrescos de energía, por lo cual el tiempo de respuesta es menor.

** Principos Básicos de las Memorias Caché
  - Posee $$  2^n $$ palabras direccionables, con una única dirección de **n** bits.
#+ATTR_LATEX: :width=0.4\linewidth
[[./imagenes/fig415.png]]
** Principios Básicos de las Memorias Caché
-- Memoria divida en un número de bloques de longitud fija, de $$ K $$ palabras por bloque,
consta de $$ C $$ líneas de $$ K $$ palabras por cada una. 
$$ M = 2^n / K $$ bloques de memoria.

** Principios Básicos de las Memorias Caché

-- Es decir, existen menos líneas de Caché que bloques de memoria.
$$ C < M $$

#+ATTR_LATEX: :width=0.5\linewidth
[[./imagenes/fig414.png]]
-- Tipos: Caché de Discos, Caché de pista, Caché de web.
** Niveles de Caché
-- **L1:** Es la más pequeña y rápida, con tamaño de 256 KB - 1 MB.

-- **L2:** Un poco más grande y lenta, con tamaño de 256 KB - 8 MB.
-- **L3:** Es la más grande y lenta, con tamño de 4MB - 50MB. 
** Elementos de Diseño de la memoria Caché
- Tamaño Caché
- Función de Correspondencia
- Algoritmo de Sustitución
- Política de escritura
- Tamaño de línea
- Número de Cachés.
** Tamaño Caché
- Es la cantidad de datos que puede almacenar.

- Factores importantes: Tasa de aciertos, latencia de acceso y costo de consumo de energía.
- Depende del computador por lo cual no se puede predecir un tamaño óptimo.
- Segun Stallings (2006) menciona que "Cuanto mas grande es, mayor es el número de puertas implicadas en direccionar la Caché" (p.114).
** Función de Correspondencia (E2,11,170)(E2,7,137)
- En consecuencia que hay menos líneas de Caché que bloques de memoría, se usa la función correspondencia,
esto determina como se organiza la Caché.

- Existen tres técnicas.

** 1. Mapeo Directo
- Es la más simple y consiste en hacer que corresponder cada bloque de memoria principal a solo una línea posible de Caché.

$$ i = j  (modulo)  m $$
Donde,
- i: Línea de Caché
- j: Dirección de RAM
- m: Número de líneas en la Caché

** Ejemplo 
- Caché con **m = 8** líneas, **j = 25** Dirección de Ram,

Entonces tendría   $$25 (mod) 8 = 1$$  líneas de Caché

- Pensemos, Si otra dirección mapea la misma línea, surge un conflicto, ya que si se referencia repetidas veces a palabras de dos bloques diferentes estarían intercambiando continuamente en la Caché,
con lo que la tasa de aciertos empieza a disminuir.

** 2.Totalmente Asociativa
- Es más flexible, ya que permite que cada bloque de memoria principal pueda cargarse en  cualquier línea de Caché.
- El problema radica en la comparación de todas las líneas para buscar coincidencias, lo que exige un hardware complejo.

** 3.Asociativo por conjuntos
- Coloca la dirección de memoria como una etiqueta y un campo de palabras, con lo que debe revisar al mismo tiempo todas las etiquetas de líneas y asi encontrar una conicidencia.
- En este caso la Caché se divide por conjuntos, en la que cada uno de ellos tiene $$k$$ líneas
Donde,
 $$k:$$ grado de asociación en conjuntos

-Por ejemplo, una Caché con 64 líneas con $$k = 4$$, tendría $$64/4 = 16$$ conjuntos.


** Algoritmo de Sustitución (E2,7,148)
**** Función
     - Decide qué línea de caché expulsar cuando todas están ocupadas.
**** Estrategias Principales
     - LRU (Least Recently Used): Reemplaza la línea menos recientemente accedida.
     - FIFO (First In, First Out): Expulsa la línea más antigua en caché.
     - Aleatorio: Selección al azar; simple pero menos predecible.
**** Impacto en Desempeño
     - LRU minimiza fallos en patrones con alta localidad temporal.
     - FIFO y Aleatorio reducen la complejidad de hardware.
** 
#+attr_latex: :width 0.60\textwidth
[[./imagenes/AS1.png]]
** Política de escritura
**** Write‑through
     - Cada escritura en caché se refleja inmediatamente en memoria principal.
     - Ventaja: Coherencia inmediata.
     - Desventaja: Mayor tráfico de memoria y latencia de escritura.
**** Write‑back
     - Escrituras se realizan primero en caché y se diferidas a memoria principal al reemplazar línea (“dirty”).
     - Ventaja: Menos tráfico de memoria, mejor rendimiento de escritura.
     - Desventaja: Requiere bits “dirty” y lógica adicional para coherencia.
** Tamaño de Línea
**** Definición
     - Cantidad de bytes transferidos entre caché y memoria en cada fallo.
**** Trade‑offs
     - Líneas grandes: Mejor localidad espacial → menos fallos, pero posible desperdicio de ancho de banda.
     - Líneas pequeñas: Menos datos innecesarios, pero más fallos si alta localidad espacial.
**** Consideraciones
     - Arquitectura del procesador y patrones de acceso típicos.
     - Balancear reducción de fallos y eficiencia de transferencia.

** 
#+attr_latex: :width 0.60\textwidth
[[./imagenes/AS3.png]]

** Número de Cachés (E2, 7, 150)
**** Caché L1
     - Muy rápida, pequeña (16–64 KB), integrada en el CPU.
**** Caché L2
     - Velocidad moderada, tamaño intermedio (128 KB–1 MB).
**** Caché L3 y superiores
     - Compartida entre núcleos, varios MB, latencias más altas.
**** Jerarquía
     - Cada nivel adicional reduce tasa de fallos global pero añade complejidad de coherencia y coste.
** 
#+attr_latex: :width 0.60\textwidth
[[./imagenes/AS4.jpg]]


* Memoria Interna (E3,7,172)(E3,11,201)
** Organización Memoria Principal Semiconductora (E3,7,172) (E3,11,201)
- [cite:@stallings2006] página 172
- [cite:@stallings2022computer] página 201 Capítulo 6

** Introducción a las memorias RAM

- *Definición*: Memoria de Acceso Aleatorio (Random-Access Memory).
  - El término RAM se usa para memorias volátiles de lectura/escritura rápida.
- *Características clave*:
  - Volátil: Pierde datos sin alimentación eléctrica.
  - Acceso directo: Cada celda tiene una dirección única.
  - Operaciones eléctricas: Lectura/escritura mediante señales.
    
#+CAPTION: Tipos de memorias semiconductoras.
#+NAME: fig:DramySram
#+attr_latex: :width 0.80\textwidth
[[./imagenes/DramySram.png]]
  
** DRAM RAM dinámica
Es una memoria volátil que almacena bits como cargas eléctricas en condensadores, sin embargo esta carga se pierde con el tiempo, así que la memoria necesita refrescarse constantemente (volver a guardar los datos muchas veces por segundo).

*** Cómo funciona una celda de DRAM
Cada celda de DRAM guarda un solo bit (0 o 1). Está formada por:
- Un **transistor**, que actúa como interruptor.
- Un **condensador**, que almacena la carga eléctrica (1 = lleno, 0 = vacío).
  
#+CAPTION: Celda de RAM dinámica.
#+attr_latex: :width 0.21\textwidth
[[./imagenes/Dram1.png]]

** Escritura y lectura (funcionamiento)

- **Escritura**: se aplica un voltaje (energía) para cargar o descargar el condensador (1 o 0).
- **Lectura**: se revisa si el condensador tiene carga. Pero al leerlo, se borra el dato, así que hay que escribirlo de nuevo.
  
** Características clave de la DRAM
- Más simple que SRAM (solo 1 transistor y 1 condensador).
- Mayor densidad y menor costo.
- Más lenta por el refresco constante.
- Usada como **memoria principal del sistema**.
- Es un dispositivo analógico: el condensador puede tener cualquier valor de carga, pero se interpreta como 0 o 1 según un valor de umbral.
  
#+CAPTION: Una celda de DRAM es como un vaso con agua. Si está lleno, es un 1; si está vacío, es un 0. Pero el agua se evapora sola, así que hay que estar rellenando el vaso todo el tiempo.
#+attr_latex: :width 0.30\textwidth
[[./imagenes/EjemploAgua.png]]

** SRAM RAM estática

LA SRAM es una memoria volátil que almacena bits usando biestables (flip-flops), se mantiene los datos sin refresco mientras haya alimentación.

*** Cómo funciona una celda de SRAM

Cada celda de SRAM usa **6 transistores**:
- **4 transistores internos** (T1, T2, T3, T4) forman el flip-flop, que mantiene el bit.
- **2 transistores de acceso** (T5 y T6) conectan la celda a las líneas externas cuando se va a leer o escribir.

#+CAPTION: Celda de RAM estática.
#+attr_latex: :width 0.25\textwidth
[[./imagenes/Sram1.png]]

** Operaciones de lectura y escritura

*** Escritura:
- Se activa la línea de direcciones (T5/T6 conducen).
- Se aplica el valor deseado en la línea B .
- El valor contrario (complemento) se aplica en la línea B⁻ (inversa).
- Esto fuerza al flip-flop a tomar el estado correcto (0 o 1).

*** Lectura:
- Se activa la línea de dirección (T5/T6 conducen).
- Se lee el valor actual en la línea B.

** Características de la SRAM 
- No necesita refresco.
- Es más rápida que la DRAM.
- Más costosa y ocupa más espacio (más transistores).
- Se usa como memoria caché (L1, L2, L3).

#+CAPTION: Una celda de SRAM es como un interruptor de luz: si está en ON (1), se queda así hasta que alguien lo cambie. No se apaga solo como en DRAM.
#+attr_latex: :width 0.30\textwidth
[[./imagenes/Luz.png]]
  
** Resumen

La SRAM es más rápida pero cara, ideal para caché. La DRAM es más densa y barata, por lo que se usa como memoria principal.
Ambas son necesarias para optimizar velocidad y costo en los sistemas modernos.

#+CAPTION: Imagen de SRAM Y DRAM.
#+attr_latex: :width 0.50\textwidth
[[./imagenes/DRAMYSRAM2.png]]

** Tipos de ROM
*** 1. Conceptos Clave
    - La ROM (Read-Only Memory) es un tipo de memoria no volátil,es decir, guarda los datos aunque no tenga energía.

*** 2. Clasificación de ROMs
**** ROM Clásica
     - El contenido se graba en fábrica, no se puede modificar.
     - Ideal para producción masiva del mismo chip.
**** PROM (Programmable ROM)
     - Se puede grabar 1 vez por el usuario.
     - Coste inicial bajo para prototipos
     - Es útil cuando se necesitan pocas unidades personalizadas.

** 3. ROMs Re-escribibles
*** EPROM
     - Se puede borrar con luz ultravioleta y volver a programar (cada borrado dura hasta 20 min.).
     - Todo el chip se borra al mismo tiempo.

*** EEPROM
     - Se puede borrar y escribir electricamente (por byte).
     - El proceso de escritura es más lento que leer.
     - Muy útil en dispositivos que necesitan actualizaciones.  

*** Memoria Flash
     - Variante moderna de EEPROM.
     - Se borra electricamente por bloques.
     - Es más rápida que EPROM. (puede borrarse entre 1 o 4 segundos).
     - No puede borrar por bytes individuales.
     - Se usa en USB, SSD, tarjetas SD, etc.


** 4. Comparativa Técnica

#+ATTR_LATEX: :width \textwidth :font \footnotesize    
| Tipo   | Programación | Borrado            | Velocidad | Uso típico      |   
|--------+--------------+--------------------+-----------+-----------------+
| ROM    | Fábrica      | No                 | -         | Firmware masivo |   
| PROM   | 1 vez        | No                 | Medio     | Prototipos      |   
| EPROM  | Múltiple     | UV (lento)         | Lento     | Desarrollo      |   
| EEPROM | Byte-a-byte  | Eléctrico (byte)   | Medio     | Ajustes         |   
| Flash  | Bloques      | Eléctrico (rápido) | Alto      | Almacenamiento  |   

#+CAPTION: Tipos de Rom
#+attr_latex: :width 0.70\textwidth
[[./imagenes/TiposdeRom.png]]

** Chip de Memoria RAM


Un chip de memoria RAM es un circuito integrado que contiene una matriz de celdas para almacenar bits. Se organiza física y lógicamente para permitir leer y escribir datos.


*** Organización interna

- El chip contiene matrices de celdas conectadas por filas (líneas horizontales) y columnas (líneas verticales).
    - Ejemplo: una DRAM de 16 Mb puede tener 4 matrices de 2048 x 2048 celdas.
- Cada celda almacena un bit, que puede ser leído o escrito usando señales eléctricas.
- Las filas y columnas se seleccionan mediante señales llamadas líneas de dirección (A0, A1, ..., A10).

** Encapsulado del chip

- El chip viene montado en una cápsula con terminales o patillas.
  
- Ejemplo: Un chip de DRAM de 16 Mb puede tener:
  - 11 líneas de dirección
  - 4 líneas de datos (lectura y escritura)
  - Señales RAS, CAS, WE, OE
      -RAS, CAS para direccionamiento.
      -WE, OE para operaciones.
  - Tensión de alimentación (Vcc), tierra (Vss)

 -Ejemplo: Un chip de EPROM de 8 Mb puede tener:
  - 32 terminales: (A0-A19, D0-D7, CE, Vpp)

#+CAPTION: Chips de encapsulamiento de memoria de EPROM y DRAM.
#+attr_latex: :width 0.50\textwidth
[[./imagenes/Encapsulamiento.png]]

** Señales y control

- Se usan señales especiales para controlar el chip:
  - **RAS** (Row Address Select): Selecciona la dirrección de fila.
  - **CAS** (Column Address Select): Seleciona la dirrección de la columna.
  - **WE** (Write Enable): Activa escritura.
  - **OE** (Output Enable): Activa buffer de salida.
- Para ahorrar terminales, se usa direccionamiento multiplexado: Primero se envía la dirección de fila, luego la de columna, usando las mismas líneas físicas.
  
*** Módulos de memoria 

- Si un chip maneja 1 bit, se necesitan 8 chips para 8 bits (1 byte).
- Si se necesitan más palabras o más bits por palabra, se organizan en filas y columnas de chips.

* Corrección de Errores (E4,7,181) (E4,11,211)

** ¿Qué es la Corrección de Errores?
La corrección de errores es un conjunto de técnicas que se utilizan en sistemas digitales para detectar y corregir errores que ocurren durante la transmisión o almacenamiento de datos.

Estos errores pueden deberse a fallos eléctricos, interferencias electromagnéticas, radiación cósmica o problemas físicos en la memoria o dispositivos.

#+CAPTION: imagen Correcion de errores
#+attr_latex: :width 0.25\textwidth
[[./imagenes/CorreccionErrores.png]]

** Tipos de Errores

*** Hard Error (Error Duro)
- Son errores permanentes provocados por daño físico en el hardware.
- No pueden corregirse reiniciando el sistema o borrando la memoria.

#+CAPTION: imagen Errores Duros
#+attr_latex: :width 0.25\textwidth  
[[./imagenes/ErroresDuros.png]]

Ejemplo:
#+begin_example
Un chip de memoria RAM se daña físicamente y siempre devuelve datos incorrectos.
#+end_example

*** Soft Error (Error Blando)
- Son errores temporales causados por factores externos (rayos cósmicos, ruido eléctrico).
- No implican daño físico en el hardware.

#+CAPTION: imagen Errores Suaves
#+attr_latex: :width 0.25\textwidth  
[[./imagenes/ErroresSuaves.png]]


Ejemplo:
#+begin_example
Un bit en la memoria cambia de 0 a 1 debido a una partícula de radiación, pero el chip sigue funcionando bien.
#+end_example

** Código de Hamming

El Código de Hamming es un método de detección y corrección de errores inventado por Richard Hamming. Su versión más usada es el (7,4), donde se transmiten 7 bits: 4 de datos y 3 de paridad.

Este código permite detectar y corregir errores de un solo bit.

#+CAPTION: imagen Codigohamming
#+attr_latex: :width 0.25\textwidth
[[./imagenes/CodigoHamming.png]]

** Ejemplo del Código de Hamming (7,4)

Queremos transmitir los datos: 1011

Se colocan los bits de la siguiente manera:

| Posición | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
|----------+---+---+---+---+---+---+---|
| Tipo     | p1| p2| d1| p3| d2| d3| d4|
| Valor    | ? | ? | 1 | ? | 0 | 1 | 1 |

*** Cálculo de bits de paridad

- p1 (1,3,5,7) → 1 + 0 + 1 = 2 → Par → p1 = 0
- p2 (2,3,6,7) → 1 + 1 + 1 = 3 → Impar → p2 = 1
- p3 (4,5,6,7) → 0 + 1 + 1 = 2 → Par → p3 = 0

Mensaje a enviar:
#+begin_example
0 1 1 0 0 1 1
#+end_example

*** Supongamos que se daña un bit...

Se recibe: 0 1 0 0 0 1 1 (el bit 3 fue alterado)

Verificamos:

- p1 (1,3,5,7) → 0+0+0+1 = 1 → Error
- p2 (2,3,6,7) → 1+0+1+1 = 3 → Error
- p3 (4,5,6,7) → 0+0+1+1 = 2 → Correcto

Bits de error: p3 p2 p1 = 0 1 1 → posición 3

→ Corregimos el bit 3 cambiando 0 a 1

** Conclusión a las que llegamos del ejemplo propuesto

- Los *hard errors* son daños físicos irreparables; los *soft errors* son temporales y corregibles.
- El Código de Hamming es eficaz para detectar y corregir errores de 1 bit.
- Utiliza bits de paridad colocados estratégicamente para determinar la posición exacta del error.

------
* Organización Avanzada de Memorias RAM (E5, 7, 187)(E5,11,216)
** Introducción a la Organización Avanzada de Memorias Ram
La evolución de los sistemas computacionales ha demostradp que, a pesar de su gran efectividad, uno de los
desafíos para alcanzar un alto rendimiento radica en la interfaz entre el procesador y la memoria principal.

A pesar de la gran velocidad de los procesadores, la memoria DRAM tradicional, de la cual ya se conoce que
almacena temporalmente información, presenta limitaciones tanto en su arquitectura interna, como en su capacidad
comunicativa con el bus de memoria. Esto, en efecto, generaría un cuello de botello los cuales, para mitigarlos,
se han implementado niveles de caché SRAM los cuales tienen mayor velocidad, puesto que no necesitan ciclos de 
actualización constantes para mantener la información.

En respuesta a toda la problemática, la industria ha desarrollado y comercializado nuevas variantes de DRAM, como
SDRAM, DDR-DRAM y RDRAM, que ofrecen mejoras significativas en varios aspectos.

** Dram síncrona
Ahora bien, la Dram síncrona, se diferencia de la tradicional puesto que permite transferencias de datos alineadas
con la velocidad máxima que el bus proporcione entre ek procesador y la memoria. Estas transferencias de datos son
logradas gracias a que el SDRAM opera con una señal de reloj.

Todo esto permite que, mientras la memoria procesa el acceso a los datos, el procesador realice más tareas.

*Principales características de la Dram síncrona*
- Sincronización con el reloj del sistema.
- Modo de ráfaga.
- Arquitectura de múltiples bancos.
- Registro de modo programable.

** DDR SDRAM
A razón de la constante búsqueda de mejoras en el rendimiento, aparece el DDR SDRAM el cual es una evolución del SDRAM.

A diferencia del SDRAM, este duplica la velocidad efectiva de transferencia, gracias  al uso de los dos flancos de la
señal de reloj (ascendente y descendente). Además emplea frecuencias más altas y un búfer de prefetch que prepara varios
bits para una salida aún más rápida.

Todos estos aumentos en la velocidad obtenidos a lo largo de las generaciones de DDR, se deben principalmente al aumento
del tamaño del búfer de prefetch. Sin embargo, en otra generación ha aparecido el concepto de "bank group". Estos permitían
operaciones paralelas dentro del chip y mejoran el rendimiento sin aumentar el tamaño del prefetch.

** EDRAM
La eDRAM integra la memoria directamente en el chip del procesador o en un módulo multichip, ubicándose entre la SRAM y la
DRAM externa en velocidad, costo y tamaño.

Ofrece mayor densidad que la SRAM y un acceso más rápido que la DRAM externa, gracias a su cercanía y buses más anchos. Esto
permite construir cachés más grandes dentro del chip, mejorando el rendimiento sin depender de memorias externas.

Su uso ha crecido en sistemas de alto rendimiento, donde se necesita mayor caché y eficiencia energética. Al consumir menos
energía que la SRAM y permitir mayor capacidad, la eDRAM es ideal para aplicaciones exigentes.

** Flash Memory(E5,11,223)
La memoria flash es un tipo de memoria semiconductor no volátil que se utiliza tanto para memoria interna como externa. combina
características intermedias entre EPROM y EEPROM, usando tecnología de borrado eléctrico que permite eliminar bloques completos
de memoria en segundos.

Usa un transistor por bit con una puerta flotante que retiene o libera electrones, manteniendo los datos sin energía, lo que la
hace útil para almacenamiento persistente.

Al retener un electrón se representa el bit del "0" y al liberarlo se representa un "1".

Existen dos tipos: NOR, con acceso aleatorio a nivel de bit, ideal para sistemas embebidos; y NAND, con acceso por bloques y mayor
velocidad, utilizada en dispositivos como USB, tarjetas SD y SSDs.
* Memorias no volátiles de estado solido(E5,11,226)
** STT-RAM
Una nueva generación deL MRAM,llamada STT-RAM (Spin-Transfer Torque RAM), la cual es una memoria no volátil de alta velocidad,
resistente al desgaste y sin consumo en reposo.

Funciona con una unión de túnel magnético, donde la orientación de capas ferromagnéticas define el bit según su resistencia eléctrica.

A diferencia de la MRAM clásica, usa corriente eléctrica para cambiar el estado, lo que mejora su eficiencia y escalabilidad. Por su
rapidez y durabilidad, es una opción viable tanto para caché como para memoria principal.

** PCRAM
Ahora bien, el PCRAM (Phase-change RAM) es una tecnología de memoria basada en materiales de aleación de calcogenuros.

El almacenamiento de datos se logra gracias a la diferencia de resistencia entre dos fases del material: una fase amorfa de alta
resistencia y una fase cristalina de baja resistencia. Mediante las operaciones de SET y RESET.
